syntax = "proto2";

package pointpillars;

enum ProcessPhase {
  PREPROCESS = 0;
  TRAINING = 1;
}

enum VOXEL_SELECT_METHOD {
  RANDOM = 0;
  BY_COUNT = 1;
}

message VoxelConfig {
  required float x_resolution = 1;
  required float y_resolution = 2;
  required float z_resolution = 3;
  required float x_range_min = 4;
  required float x_range_max = 5;
  required float y_range_min = 6;
  required float y_range_max = 7;
  required float z_range_min = 8;
  required float z_range_max = 9;
  required int32 num_voxels = 10;
  required int32 num_points_per_voxel = 11;
  required VOXEL_SELECT_METHOD voxel_select_method = 12;
  optional bool save_points = 13 [default=false];
  optional bool log_voxel_num = 14 [default=false]; // enable to output voxel_num distribution
  optional bool log_point_num = 15 [default=false]; // enable to output piont_num distribution
}

message AnchorSize {
  required float length = 1;
  required float width = 2;
  required float height = 3;
}

message AnchorConfig {
  // IOU of  (anchor, label) pair above which will be considered as positive
  required float match_thr = 1;
  // IOU of  (anchor, label) pair below which will be considered as positive
  required float unmatch_thr = 2;

  // pre-defined anchor size
  repeated AnchorSize anchor_size = 3;

  // unmatch anchor sample ratio in pre-process phase
  optional float unmatch_anchor_sample_ratio = 4;
}

message ModelConfig {
  required string model_name = 1;
  required bool use_reflection = 2;
  repeated int32 pillar_feat_filters = 3;
  required int32 num_class = 4;
  repeated int32 rpn_layer_num = 5;
  repeated int32 rpn_layer_strides = 6;
  repeated int32 rpn_num_filters = 7;
  repeated int32 rpn_upsample_strides = 8;
  repeated int32 rpn_upsample_filters = 9;
  required int32 num_anchor_per_loc = 10;
  required bool use_dir_class = 11;
  required float nms_score_threshold = 12;
  required float nms_iou_threshold = 13;
}

message TrainConfig {
  required int32 batch_size = 1;
  required int32 train_epochs = 2;
  required int32 steps_per_eval = 3;
  required int32 steps_to_save_ckpts = 4;
  required int32 steps_to_update_metric = 5;
  required int32 max_keep_ckpts = 6;
  required int32 data_load_threads = 7;
  required string optimizer = 8;  // options: "adam", "adadeltea", "sgd"
  required float learning_rate = 9;
  required float lr_decay = 10;
  required float focal_alpha = 11;
  required float focal_gamma = 12;
  required float smooth_l1_sigma = 13;
  required int32 sample_anchor_size = 14;
  required int32 max_pos_anchor_size = 15;
  required int32 max_neg_match_anchor_size = 16;
  required float pos_class_weight = 17;
  required float neg_class_weight = 18;
  required float cls_loss_weight = 19;
  required float reg_loss_weight = 20;
  required float dir_loss_weight = 21;
  optional bool data_parallel = 22 [default=false];
  optional bool enable_summary = 23 [default=false];
}

message EvalConfig {
  required int32 batch_size = 1;
  required int32 data_load_threads = 2;
}

message PointPillarsConfig {
  required VoxelConfig voxel_config = 1;
  required AnchorConfig anchor_config = 2;
  required ModelConfig model_config = 3;
  required TrainConfig train_config = 4;
  required EvalConfig eval_config = 5;
}
